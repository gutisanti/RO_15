Ejercicios de programación orientada a objetos
Ejercicio 1Permalink
Vamos a crear una clase llamada Persona. Sus atributos son: nombre, edad y DNI. Construye los siguientes métodos para la clase:

Un constructor, donde los datos pueden estar vacíos.
Los setters y getters para cada uno de los atributos. Hay que validar las entradas de datos.
mostrar(): Muestra los datos de la persona.
esMayorDeEdad(): Devuelve un valor lógico indicando si es mayor de edad.

Ejercicio 2Permalink
Crea una clase llamada Cuenta que tendrá los siguientes atributos: titular (que es una persona) y cantidad (puede tener decimales). El titular será obligatorio y la cantidad es opcional. Construye los siguientes métodos para la clase:

Un constructor, donde los datos pueden estar vacíos.
Los setters y getters para cada uno de los atributos. El atributo no se puede modificar directamente, sólo ingresando o retirando dinero.
mostrar(): Muestra los datos de la cuenta.
ingresar(cantidad): se ingresa una cantidad a la cuenta, si la cantidad introducida es negativa, no se hará nada.
retirar(cantidad): se retira una cantidad a la cuenta. La cuenta puede estar en números rojos.

Ejercicio 3Permalink
Vamos a definir ahora una “Cuenta Joven”, para ello vamos a crear una nueva clase CuantaJoven que deriva de la anterior. Cuando se crea esta nueva clase, además del titular y la cantidad se debe guardar una bonificación que estará expresada en tanto por ciento.Construye los siguientes métodos para la clase:

Un constructor.
Los setters y getters para el nuevo atributo.
En esta ocasión los titulares de este tipo de cuenta tienen que ser mayor de edad., por lo tanto hay que crear un método esTitularValido() que devuelve verdadero si el titular es mayor de edad pero menor de 25 años y falso en caso contrario.
Además la retirada de dinero sólo se podrá hacer si el titular es válido.
El método mostrar() debe devolver el mensaje de “Cuenta Joven” y la bonificación de la cuenta.
Piensa los métodos heredados de la clase madre que hay que reescribir.

Ejercicios resueltosPermalink
1_ class Persona():

    def __init__(self,nombre="",edad=0,dni=""):
        self.nombre=nombre
        self.edad=edad
        self.dni=dni
    
    @property
    def nombre(self):
        return self.__nombre

    @property
    def edad(self):
        return self.__edad

    @property
    def dni(self):
        return self.__dni
    
    @nombre.setter
    def nombre(self,nombre):
        self.__nombre=nombre

    def validar_dni(self):
        letras = "TRWAGMYFPDXBNJZSQVHLCKE"
        if len(self.__dni)!=9:
            print("DNI incorrecto")
            self.__dni = ""
        else:
            letra = self.__dni[8]
            num = int(self.__dni[:8])
            if letra.upper() != letras[num % 23]:
                print("DNI incorrecto")
                self.__dni = ""

    @dni.setter
    def dni(self,dni):
        self.__dni=dni
        self.validar_dni()
      
    @edad.setter
    def edad(self,edad):
        if edad < 0:
            print("Edad incorrecta")
            self.__edad=0
        else:
            self.__edad=edad
    
    
    def mostrar(self):
        return "Nombre:"+self.nombre+" - Edad:"+str(self.edad)+" - DNI:"+self.dni

    def esMayorDeEdad(self):
        return self.edad>=18

________________________________________________________________________________________________
2_class Cuenta():

    def __init__(self,titular,cantidad=0):
        self.titular=titular
        self.__cantidad=cantidad
    
    @property
    def titular(self):
        return self.__titular
    
    @property
    def cantidad(self):
        return self.__cantidad

    @titular.setter
    def titular(self,titular):
        self.__titular=titular

       
    def mostrar(self):
        return "Cuenta\n"+"Titular:"+self.titular.mostrar()+" - Cantidad:"+str(self.cantidad)
    
    def ingresar(self,cantidad):
        if cantidad > 0:
            self.__cantidad = self.__cantidad + cantidad
    
    def retirar(self,cantidad):
        if cantidad > 0:
            self.__cantidad = self.__cantidad - cantidad
____________________________________________________________________________________________________________

3_ from ejercicio2 import Cuenta
class CuentaJoven(Cuenta):

    def __init__(self,titular,cantidad=0,bonificacion=0):
        super().__init__(titular,cantidad)
        self.bonificacion=bonificacion
    
    @property
    def bonificacion(self):
        return self.__bonificacion
    
    @bonificacion.setter
    def bonificacion(self,bonificacion):
        self.__bonificacion=bonificacion

    def mostrar(self):
        return "Cuenta Joven\n"+"Titular:"+self.titular.mostrar()+" - Cantidad:"+str(self.cantidad)+ "- Bonificación:"+str(self.bonificacion)+"%"
   
    def esTitularValido(self):
        return self.titular.edad < 25 and self.titular.esMayorDeEdad()
    
    def retirar(self,cantidad):
        if not self.esTitularValido():
            print ("No puesdes retirar el dinero. titular no válido")
        elif cantidad > 0:
            super().retirar(cantidad)
__________________________________________________________________________________________________________________________________

otros ejercisios

class EventoEvaluativo:

    def __init__(self, codigo: str, nombre: str, descripcion: str, porcentaje: float):
        self.codigo: str = codigo
        self.nombre: str = nombre
        self.descripcion: str = descripcion
        self.porcentaje: float = porcentaje

    def __str__(self) -> str:
        return f"{self.codigo} - {self.nombre} ({self.porcentaje: .1f}%"


class Evaluacion:

    def __init__(self, evento: EventoEvaluativo, calificacion: float):
        self.evento: EventoEvaluativo = evento
        self.calificacion: float = calificacion

    def __str__(self) -> str:
        return f"{str(self.evento)}: {self.calificacion: .1f}"


class Estudiante:

    def __init__(self, identificacion: str, nombre: str):
        self.identificacion: str = identificacion
        self.nombre: str = nombre
        self.evaluaciones: list[Evaluacion] = []

    def calcular_promedio(self) -> float:
        calificaciones = [(e.calificacion, e.evento.porcentaje) for e in self.evaluaciones]
        promedio: float = 0
        for c in calificaciones:
            promedio += c[0] * (c[1] / 100)
        return promedio

    def agregar_evaluacion(self, evento: EventoEvaluativo, calificacion: float):
        evaluacion = Evaluacion(evento, calificacion)
        self.evaluaciones.append(evaluacion)

    def __str__(self) -> str:
        return f"{self.identificacion} - {self.nombre}"


class Curso:

    def __init__(self, nombre: str):
        self.nombre: str = nombre
        self.eventos_evaluativos: dict[str, EventoEvaluativo] = {}
        self.estudiantes: dict[str, Estudiante] = {}

    def se_puede_agregar_evento_con_porcentaje(self, porcentaje: float):
        suma_porcentaje = sum([p.porcentaje for p in self.eventos_evaluativos.values()])
        return (suma_porcentaje + porcentaje) <= 100

    def agregar_evento_evaluativo(self, codigo: str, nombre: str, descripcion: str, porcentaje: float):
        if codigo not in self.eventos_evaluativos.keys():
            evento: EventoEvaluativo = EventoEvaluativo(codigo, nombre, descripcion, porcentaje)
            self.eventos_evaluativos[codigo] = evento
            return True
        else:
            return False

    def registrar_estudiante(self, identificacion: str, nombre: str):
        if identificacion not in self.estudiantes.keys():
            estudiante: Estudiante = Estudiante(identificacion, nombre)
            self.estudiantes[identificacion] = estudiante
            return True
        else:
            return False

    def agregar_calificacion_a_estudiante(self, identificacion: str, codigo_evento: str, calificacion: float):
        if identificacion in self.estudiantes.keys():
            estudiante = self.estudiantes[identificacion]
            evento = self.eventos_evaluativos[codigo_evento]
            estudiante.agregar_evaluacion(evento, calificacion)

    def estudiante_con_mejor_promedio(self) -> Estudiante:
        promedio_mayor = 0
        mejor_estudiante = None
        for estudiante in self.estudiantes.values():
            promedio = estudiante.calcular_promedio()
            if promedio > promedio_mayor:
                promedio_mayor = promedio
                mejor_estudiante = estudiante
        return mejor_estudiante

    def evaluaciones_faltantes_de_estudiante(self, identificacion: str) -> list[EventoEvaluativo]:
        evaluaciones_faltantes: list[EventoEvaluativo] = []
        if identificacion in self.estudiantes.keys():
            estudiante = self.estudiantes[identificacion]
            eventos_evaluados: list[EventoEvaluativo] = [e.evento for e in estudiante.evaluaciones]
            for evento in self.eventos_evaluativos:
                if evento not in eventos_evaluados:
                    evaluaciones_faltantes.append(evento)
            return evaluaciones_faltantes
        else:
            return None

______________________________________________________________________________________________________________________________________________________________
Ahorcado preguntas
from dataclasses import dataclass, field

from ahorcado.modelo.datos import ProveedorPalabras

LETRA_VACIA: str = "_"
INTENTOS_MAXIMOS: int = 7


class Palabra:

    # TODO: Método inicializador

    # TODO: Método contiene_letra

    def posiciones_letra(self, letra: str) -> list[int]:
        return [i for i, ch in enumerate(self.texto) if ch == letra]

    # TODO: Método agregar_letra

    # TODO: Método esta_completa

    # TODO: Método especial


# TODO: Definición de la clase Ahorcado

    # TODO: Atributo intentos
    letras_usadas: list[str] = field(default_factory=list, init=False)
    proveedor_palabras: ProveedorPalabras = ProveedorPalabras()
    palabra_objetivo: Palabra = None

    def generar_texto(self) -> str:
        return self.proveedor_palabras.proveer_palabra()

    # TODO: Método iniciar_juego

    # TODO: Método letra_usada

    def palabra_completa(self) -> bool:
        return self.palabra_objetivo.esta_completa()

    # TODO: Método tiene_intentos_disponibles

    # TODO: Método agregar_letra
_______________________________________________________________________________________________________________________________________________________________
Ahorcado

from dataclasses import dataclass, field

@dataclass
class Palabra:
    texto: str = ""
    letras_adivinadas: set = field(default_factory=set)

    def contiene_letra(self, letra: str) -> bool:
        return letra in self.texto

    def posiciones_letra(self, letra: str) -> list[int]:
        return [i for i, ch in enumerate(self.texto) if ch == letra]

    def agregar_letra(self, letra: str) -> None:
        self.letras_adivinadas.add(letra)

    def esta_completa(self) -> bool:
        return set(self.texto) == self.letras_adivinadas


from dataclasses import dataclass, field
from ahorcado.modelo.datos import ProveedorPalabras

@dataclass
class Ahorcado:
    intentos: int = 0
    letras_usadas: list[str] = field(default_factory=list)
    proveedor_palabras: ProveedorPalabras = ProveedorPalabras()
    palabra_objetivo: Palabra = field(default=None, init=False)

    def generar_texto(self) -> str:
        return self.proveedor_palabras.proveer_palabra()

    def iniciar_juego(self) -> None:
        self.intentos = 0
        self.letras_usadas = []
        self.palabra_objetivo = Palabra(self.generar_texto())

    def letra_usada(self, letra: str) -> bool:
        return letra in self.letras_usadas

    def tiene_intentos_disponibles(self) -> bool:
        return self.intentos < INTENTOS_MAXIMOS

    def agregar_letra(self, letra: str) -> str:
        if letra in self.letras_usadas:
            return "Ya has usado esa letra."

        self.letras_usadas.append(letra)
        if self.palabra_objetivo.contiene_letra(letra):
            self.palabra_objetivo.agregar_letra(letra)
            if self.palabra_completa():
                return f"¡Ganaste! La palabra era: {self.palabra_objetivo.texto}"
        else:
            self.intentos += 1
            if not self.tiene_intentos_disponibles():
                return f"Perdiste. La palabra era: {self.palabra_objetivo.texto}"

        return self.generar_estado_palabra()

    def palabra_completa(self) -> bool:
        return self.palabra_objetivo.esta_completa()

    def generar_estado_palabra(self) -> str:
        estado = [LETRA_VACIA if letra not in self.palabra_objetivo.letras_adivinadas else letra
                  for letra in self.palabra_objetivo.texto]
        return " ".join(estado)

________________________________________________________________________________________________________________
Otra forma de hacerlo
import random

LETRA_VACIA: str = "_"
INTENTOS_MAXIMOS: int = 7

class ProveedorPalabras:
    def proveer_palabra(self):
        palabras = ["python", "programacion", "ahorcado", "juego", "jugador"]
        return random.choice(palabras)

class Palabra:
    def __init__(self, texto):
        self.texto = texto
        self.letras_adivinadas = set()

    def contiene_letra(self, letra):
        return letra in self.texto

    def posiciones_letra(self, letra):
        return [i for i, ch in enumerate(self.texto) if ch == letra]

    def agregar_letra(self, letra):
        self.letras_adivinadas.add(letra)

    def esta_completa(self):
        return set(self.texto) == self.letras_adivinadas

class Ahorcado:
    def __init__(self):
        self.intentos = 0
        self.letras_usadas = []
        self.proveedor_palabras = ProveedorPalabras()
        self.palabra_objetivo = None

    def generar_texto(self):
        return self.proveedor_palabras.proveer_palabra()

    def iniciar_juego(self):
        self.intentos = 0
        self.letras_usadas = []
        self.palabra_objetivo = Palabra(self.generar_texto())

    def letra_usada(self, letra):
        return letra in self.letras_usadas

    def tiene_intentos_disponibles(self):
        return self.intentos < INTENTOS_MAXIMOS

    def agregar_letra(self, letra):
        if letra in self.letras_usadas:
            return "Ya has usado esa letra."

        self.letras_usadas.append(letra)
        if self.palabra_objetivo.contiene_letra(letra):
            self.palabra_objetivo.agregar_letra(letra)
            if self.palabra_completa():
                return f"¡Ganaste! La palabra era: {self.palabra_objetivo.texto}"
        else:
            self.intentos += 1
            if not self.tiene_intentos_disponibles():
                return f"Perdiste. La palabra era: {self.palabra_objetivo.texto}"

        return self.generar_estado_palabra()

    def palabra_completa(self):
        return self.palabra_objetivo.esta_completa()

    def generar_estado_palabra(self):
        estado = [LETRA_VACIA if letra not in self.palabra_objetivo.letras_adivinadas else letra
                  for letra in self.palabra_objetivo.texto]
        return " ".join(estado)

    def jugar(self):
        while True:
            opcion = input("Elige una opción:\n1. Iniciar nuevo juego\n2. Salir\n")
            if opcion == "1":
                self.iniciar_juego()
                print("Adivina la palabra: ", " ".join(self.generar_estado_palabra()))
                while self.tiene_intentos_disponibles():
                    letra = input("Ingresa una letra: ")
                    resultado = self.agregar_letra(letra)
                    print(resultado)
                    if resultado.startswith("¡Ganaste!") or resultado.startswith("Perdiste."):
                        break
            elif opcion == "2":
                print("¡Adiós!")
                break
            else:
                print("Opción no válida. Por favor, elige una opción válida.")

if __name__ == "__main__":
    juego = Ahorcado()
    juego.jugar()



